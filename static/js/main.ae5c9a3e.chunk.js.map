{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["neighbourOperations","App","useState","speed","setSpeed","speedRef","useRef","running","setRunning","runningRef","current","createEmptyGrid","Array","fill","grid","setGrid","run","useCallback","prevGrid","map","rows","x","col","y","neighbours","forEach","modX","modY","newX","newY","setTimeout","className","style","margin","display","gridTemplateColumns","border","onClick","markedX","markedY","key","width","height","backgroundColor","undefined","borderRadius","i","push","from","Math","random","randomGrid","type","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae5c9a3e.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport './App.css';\n\nlet numRows = 40;\nlet numCols = 50;\n\nconst neighbourOperations = [\n  [-1, -1], [0, -1], [1, -1],\n  [-1, 0],/*[0, 0],*/[1, 0],\n  [-1, 1], [0, 1], [1, 1]\n]\n\nfunction App() {\n  const [speed, setSpeed] = useState(100);\n  const speedRef = useRef(speed);\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const createEmptyGrid = () => {\n    return(Array(numRows).fill(Array(numCols).fill(0)));\n  }\n  const [grid, setGrid] = useState(() => createEmptyGrid());\n  \n  const randomGrid = () => {\n    const rows = [];\n    for (let i = 0; i< numRows; i++) {\n      rows.push(\n        Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n      )\n    }\n    return rows;\n  }\n\n  const run = useCallback(() => {\n    if(!runningRef.current) {\n      return; // do nothing\n    }\n\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((rows, x) => rows.map((col, y) => {\n        let neighbours = 0;\n        neighbourOperations.forEach(([modX, modY]) => {\n          // use modX and modY to compute neighbour\n          const newX = (x + modX + numRows) % numRows; // wrap around with modulo\n          const newY = (y + modY + numCols) % numCols; // wrap around with modulo\n          // check out of bounds\n          if (newX >= 0 && newX < numRows && newY >= 0 && newY < numCols) {\n            // not out of bounds\n            neighbours += prevGrid[newX][newY]; // if =1 is alive so add 1 \n          }\n        });\n        // rules\n        if(neighbours < 2 || neighbours > 3) {\n          // less than 2 neighbours and more than 3 neighbours dies\n          return 0;\n        } else if(col === 0 && neighbours === 3) {\n          // if cell is dead and there are 3 neighbours gets born\n          return 1;\n        } else {\n          return col;\n        }\n      }))\n      return newGrid;\n    })\n    setTimeout(run, speedRef.current);\n  }, [])\n  \n  \n  const clickCell = (markedX, markedY) => {\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((rows, x) => rows.map((col, y) => {\n        if(markedX === x && markedY === y) {\n          return (col = col ? 0: 1);\n        } else {\n          return col;\n        }\n      }))\n      return newGrid;\n    })    \n  }\n  return (\n    <div className=\"app-container\">\n      <div style = {\n        {\n          margin: '1rem',\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n          border: 'solid 1px lightgrey',\n        }\n      }>\n        {grid.map((rows, x) => rows.map((col, y) => \n          <div \n            onClick = {() => {clickCell(x,y)}}\n            key = {`${x}-${y}`}\n            style = {{\n              width: 20,\n              height: 20,\n              backgroundColor: grid[x][y] ? 'black' : undefined, // if =0 then is false because truthy/falsey\n              // border: \"solid 1px lightgrey\",\n              borderRadius: '1rem'\n            }}\n          />\n        ))}\n      </div>\n      <div className=\"action-container\">\n        Menu\n        <button onClick={() => {\n          setRunning(!running);\n          runningRef.current = true;\n          run();\n        }}>\n          {running ? 'Stop' : 'Start'}\n        </button>  \n        <button onClick={() => setGrid(() => createEmptyGrid())}>Reset</button>  \n        <button onClick={() => setGrid(() => randomGrid())}>Randomise</button>  \n        <input type=\"number\" value={speed} onChange={event => setSpeed(event.target.value)}/>\n        <button onClick={() => {speedRef.current = speed}}>Change Speed</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}